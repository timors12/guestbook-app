pipeline {
    parameters {
        choice(name: 'PLATFORM_FILTER', choices: ['all', 'linux1', 'linux2', 'linux3'], description: 'Run on specific platform')
        string(name: 'DockerImage', defaultValue: 'hezil/guestbook', description: '')
        string(name: 'ContainerName', defaultValue: 'guestbook', description: '')
    }
    //agent { node { label 'slave_52.14.210.84' } }
    agent none
    stages {
        stage('BuildAndTest') {
            matrix {
                agent {
                    label 'slave_52.14.210.84'
                }
                when { anyOf {
                    expression { params.PLATFORM_FILTER == 'all' }
                    expression { params.PLATFORM_FILTER == env.PLATFORM }
                } }
                axes {
                    axis {
                        name 'PLATFORM'
                        values 'linux1', 'linux2', 'linux3'
                    }
                }
                stages {
                    stage('Deploy') {
                        steps {
                            echo "Do Deploy for ${PLATFORM}"
                            echo 'Pull and run docker image....'
                            sh "docker pull ${params.DockerImage}:latest"
                            sh "docker run -d -P --name ${params.ContainerName}_${PLATFORM} ${params.DockerImage}; sleep 5"
                            sh "docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" ${params.ContainerName}_${PLATFORM}"
                            script {def dockerPort = sh (script: "docker port ${params.ContainerName}_${PLATFORM} 80 | grep -o -P \"[0-9]{2,5}\"" , returnStdout: true).trim()}                        
                        }
                    }
                    stage('Test') {
                        steps {
                            echo "Do Test for ${PLATFORM}"
                        }
                    }
                    stage('Cleanup') { // Remove docker Container and image
                        steps {
                            echo "Cleanup for ${PLATFORM}"
                            cleanWs()
                            sh "docker container stop ${params.ContainerName}_${PLATFORM} || true"
                            sh "docker container rm -f ${params.ContainerName}_${PLATFORM} || true"
                            sh "docker image rm -f ${params.DockerImage} || true"
                        }
                    }
                }
            }
        }
    }
}
