pipeline {
    agent { node { label 'slave_52.14.210.84' } }
    parameters {
        string(name: 'DockerImage', defaultValue: 'hezil/guestboo', description: '')
        string(name: 'ContainerName', defaultValue: 'guestbook', description: '')
    }
    stages {
        stage('Pre') { // Run pre-build steps
            steps {
                echo 'Pre..'
                cleanWs()
                sh "docker container rm -f ${params.ContainerName} || true"
            }
        }
        stage('Cloning Git') {
            steps {
                echo 'Cloning Git..'
                git url: 'https://github.com/hezil/guestbook-app.git', branch: 'master'
            }
        }
        stage('Build docker image') {
            steps {
                echo 'Build docker image..'
                dir ('php-redis/') {
                    sh "docker build --tag ${params.DockerImage} ."
                }

            }
        }
        stage('Run docker image') {
            steps {
                echo 'Run docker image....'
                sh "docker run -d --name ${params.ContainerName} --rm --expose 80 ${params.DockerImage}; sleep 5"
                sh "docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" ${params.ContainerName}"
                sh "docker port ${params.ContainerName} 80 | grep -o -P \"[0-9]{2,5}\""
            }
        }
        stage('Test docker image') {
            steps {                
                script {def dockerOutput = sh (
                    script: 'curl -s --head  --request GET http://localhost:${port} | grep "200 OK" | wc -l',
                    returnStdout: true
                    ).trim()
                    if ( dockerOutput == "1" ) {
                        currentBuild.result = 'SUCCESS'
                    } else {
                            currentBuild.result = 'FAILURE'
                            sh "echo webserver returned ${dockerOutput}"
                    }
                }
            }
        }
        stage('Push docker image') { // push image to docker hub
            steps {
                echo 'Push image to docker hub....'
                withDockerRegistry(credentialsId: 'hezil_dockerhub', url: "") {
                    sh "docker push ${params.DockerImage}"
                }
            }
        }
        stage('Cleanup') { // Remove docker Container and image
            steps {
                echo 'Pre..'
                cleanWs()
                sh "docker container stop ${params.ContainerName} || true"
                sh "docker container rm -f ${params.ContainerName} || true"
                sh "docker image rm -f ${params.DockerImage} || true"
            }
        }
    }
    post {
        always {
            echo "bye!!"
            //mail bcc: '', body: "<b>Example</b><br>\\n\\<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "hezil@zizooo.com";
            slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#jenkins_pipeline_demo', color: 'good', message: 'Yes!Yes!Yes!', teamDomain: 'hezil', tokenCredentialId: 'slack'
        }
    }

}
